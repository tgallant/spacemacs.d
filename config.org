* Emacs Configuration
** General
*** Set Window Size
#+begin_src emacs-lisp
  (setq initial-frame-alist '((top . 30) (left . 30) (width . 125) (height . 45)))
#+end_src
*** Elisp Path
#+begin_src emacs-lisp
  (defconst paths
    '("~/src/advent2022/"))

  (defun add-to-load-path (path)
    (add-to-list 'load-path path))

  (mapc 'add-to-load-path paths)
#+end_src
*** Info Path
#+begin_src emacs-lisp
  (defun add-local-info-dir ()
    (info-initialize)
    (add-to-list 'Info-directory-list "~/info"))

  (eval-after-load "info"
    '(progn
       (if (file-directory-p "~/info")
           (add-dir-local-variable))))
#+end_src
*** Tabs/Spaces
#+begin_src emacs-lisp
  (defun handle-tab-exceptions ()
    (if (and buffer-file-name
             (not (string-equal mode-name "Makefile")))
        (setq indent-tabs-mode nil)))
  
  (add-hook 'find-file-hook 'handle-tab-exceptions)
  
  ;;; java indentation
  (add-hook
   'java-mode-hook
   (lambda ()
     (setq c-basic-offset 2)))
#+end_src
*** Importmagic
#+begin_src emacs-lisp
  (setq importmagic-python-interpreter "~/.pyenv/shims/python")
#+end_src
*** Undo Tree
Save all ~.undo-tree~ files in ~~/.emacs.d/undo~.
#+begin_src emacs-lisp
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src
*** Turn on Auto Fill for text-mode
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src
*** Disable Kubernetes auto refresh
#+begin_src emacs-lisp
  (setq kubernetes-poll-frequency 3600)
  (setq kubernetes-redraw-frequency 3600)
#+end_src
*** Use ripgrep for helm search
#+begin_src emacs-lisp
  (setq helm-ag-base-command "rg -S --no-heading")
#+end_src
*** Use ruff for python flycheck
    #+begin_src emacs-lisp
      ;; From https://github.com/flycheck/flycheck/issues/1974#issuecomment-1343495202
      (flycheck-define-checker python-ruff
        "A Python syntax and style checker using the ruff utility.
      To override the path to the ruff executable, set
      `flycheck-python-ruff-executable'.
      See URL `http://pypi.python.org/pypi/ruff'."
        :command ("ruff"
                  "--format=text"
                  (eval (when buffer-file-name
                          (concat "--stdin-filename=" buffer-file-name)))
                  "-")
        :standard-input t
        :error-filter (lambda (errors)
                        (let ((errors (flycheck-sanitize-errors errors)))
                          (seq-map #'flycheck-flake8-fix-error-level errors)))
        :error-patterns
        ((warning line-start
                  (file-name) ":" line ":" (optional column ":") " "
                  (id (one-or-more (any alpha)) (one-or-more digit)) " "
                  (message (one-or-more not-newline))
                  line-end))
        :modes python-mode)

      (add-hook 'python-mode-hook
                (lambda ()
                  (flycheck-mode 1)
                  (semantic-mode 1)
                  (setq flycheck-checker 'python-ruff
                        flycheck-checker-error-threshold 900)))
    #+end_src
** Org
*** Basic
**** Set Base Org Folder
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-agenda-files '("~/org")))
#+end_src
**** Enable org-indent-mode
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-startup-indented t))
#+end_src
*** Add project TODOs to Agenda
#+begin_src emacs-lisp
  (with-eval-after-load 'org-agenda
    (require 'org-projectile)
    (mapcar #'(lambda (file)
               (when (file-exists-p file)
                 (push file org-agenda-files)))
            (org-projectile-todo-files)))
#+end_src
*** Capture templates
    Daily items will be captured in a file that contains the current date. Every
    day a new daily file will be used.

    The idea is to capture everything into one file for the day to day. If some
    ideas or items become more important they can be refiled into an appropriate
    file.

    #+begin_src emacs-lisp
      (defun format-date-value (val)
        (if (= 2 (length (number-to-string val))) val
          (format "0%s" val)))

      (defun daily-filename ()
        (cl-destructuring-bind (_ _ _ d m y _ _ _) (decode-time)
          (format "%s/daily/%s-%s-%s.org"
                  org-directory
                  y
                  (format-date-value m)
                  (format-date-value d))))

      (defvar org-daily-capture-location (daily-filename))

      (defun update-org-daily-capture-location ()
        (setq org-daily-capture-location (daily-filename)))

      (run-with-timer 0 (* 60 30) 'update-org-daily-capture-location)

      (setq org-capture-templates
            '(("d" "Daily" entry
               (file org-daily-capture-location)
               "* %?")))
    #+end_src
** Magit
*** Undo last commit
#+begin_src emacs-lisp
  (defun undo-last-commit ()
    (interactive)
    (magit-reset-soft "HEAD^"))

  (with-eval-after-load 'magit
    (transient-append-suffix 'magit-reset "w"
      '("u" "undo" undo-last-commit)))
#+end_src
*** Stage and commit each unstaged file
#+begin_src emacs-lisp
  (defun stage-and-commit-file (file)
    (magit-stage-file file)
    (magit-run-git "commit" "-m" file))

  (defun commit-each-unstaged-file ()
    "Stage and commit each file returned by magit-unstaged-files"
    (interactive)
    (dolist (file (magit-unstaged-files))
      (stage-and-commit-file file)))

  (with-eval-after-load 'magit
    (transient-append-suffix 'magit-commit "c"
      '("E" "Commit each unstaged file" commit-each-unstaged-file)))
#+end_src
*** Replay commits on top of branch
    Using sleep-for works fine but would be good to figure out a more reliable
    check.
#+begin_src emacs-lisp
  (defun wait-for-git-rebase ()
    (print "wait for rebase")
    (if (not (file-exists-p ".git/REBASE_HEAD"))
        (progn
          (sleep-for 1)
          (print "checking for rebase...")
          (wait-for-git-rebase))))

  (defun wait-for-git-lock ()
    (print "wait for lock")
    (if (not (file-exists-p ".git/index.lock"))
        (progn
          (sleep-for 1)
          (print "checking for index lock...")
          (wait-for-git-lock))))

  (defun wait-for-git-lock-release ()
    (print "wait for lock release")
    (if (file-exists-p ".git/index.lock")
        (progn
          (sleep-for 1)
          (print "checking for index lock release...")
          (wait-for-git-lock-release))))

  (defun replay-commits-on-branch (commit)
    "Replay the commits starting at the point on top of another branch"
    (interactive (list (magit-reset-read-branch-or-commit
                        (concat (magit--propertize-face "Hard" 'bold)
                                " reset %s to"))))
    (let ((commit-at-point (magit-commit-at-point)))
      (magit-rebase-edit-commit commit-at-point '())
      (sleep-for 1)
      (magit-reset-hard commit)
      (sleep-for 1)
      (magit-rebase-continue)))

  (with-eval-after-load 'magit
    (transient-append-suffix 'magit-rebase "s"
      '("b" "Replay commits on branch" replay-commits-on-branch)))
#+end_src
*** Add and push tag
#+begin_src emacs-lisp
  (defun undo-last-commit ()
    (interactive)
    (magit-reset-soft "HEAD^"))

  (defun tag-and-push (name rev &optional args)
    (interactive (list (magit-read-tag "Tag name")
                       (magit-read-branch-or-commit "Place tag on")
                       (let ((args (magit-tag-arguments)))
                         (when current-prefix-arg
                           (cl-pushnew "--annotate" args))
                         args)))
    (magit-tag-create name rev args)
    (magit-push-tag name "origin"))

  (with-eval-after-load 'magit
    (transient-append-suffix 'magit-tag "t"
      '("T" "tag and push" tag-and-push)))
#+end_src
*** Bump tag version
    Read the most recent tag. If it contains a version number like ~example.v1~
    then bump to the next version like ~example.v2~.

#+begin_src emacs-lisp
  (defun magit-read-tag-with-initial-value (prompt initial)
    (magit-completing-read prompt (magit-list-tags) nil
                           nil initial 'magit-revision-history
                           (magit-tag-at-point)))

  (defun latest-tag ()
    (nth 0 (magit-git-lines "describe" "--tags")))

  (defun make-next-tag (tag-parts)
    (cond ((= (length tag-parts) 0)
           (format "%s.v2" (nth 0 tag-parts)))
          (:else (->> (nth 1 tag-parts)
                      (string-to-number)
                      (+ 1)
                      (format "%s.v%d" (nth 0 tag-parts))))))

  (defun bump-tag (tag)
    (-> (split-string tag "\\.v")
        (make-next-tag)))

  (defun find-and-bump-tag ()
    (-> (latest-tag)
        (bump-tag)))

  (defun bump-tag-version (name rev &optional args)
    (interactive
     (list (magit-read-tag-with-initial-value "Tag name" (find-and-bump-tag))
           (magit-read-branch-or-commit "Place tag on")
           (let ((args (magit-tag-arguments)))
             (when current-prefix-arg
               (cl-pushnew "--annotate" args))
             args)))
    (magit-tag-create name rev args))

  (defun bump-tag-version-and-push (name rev &optional args)
    (bump-tag-version)
    (magit-push-tag name "origin"))

  (with-eval-after-load 'magit
    (transient-append-suffix 'magit-tag "T"
      '("v" "bump tag version" bump-tag-version))
    (transient-append-suffix 'magit-tag "v"
      '("V" "bump tag version and push" bump-tag-version)))
#+end_src
