* Emacs Configuration
** General
*** Set Window Size
#+begin_src emacs-lisp
  (setq initial-frame-alist '((top . 30) (left . 30) (width . 125) (height . 45)))
#+end_src
*** Info Path
#+begin_src emacs-lisp
  (defun add-local-info-dir ()
    (info-initialize)
    (add-to-list 'Info-directory-list "~/info"))

  (eval-after-load "info"
    '(progn
       (if (file-directory-p "~/info")
           (add-dir-local-variable))))
#+end_src
*** Tabs/Spaces
#+begin_src emacs-lisp
  (defun handle-tab-exceptions ()
    (if (and buffer-file-name
             (not (string-equal mode-name "Makefile")))
        (setq indent-tabs-mode nil)))
  
  (add-hook 'find-file-hook 'handle-tab-exceptions)
  
  ;;; java indentation
  (add-hook
   'java-mode-hook
   (lambda ()
     (setq c-basic-offset 2)))
#+end_src
*** Importmagic
#+begin_src emacs-lisp
  (setq importmagic-python-interpreter "~/.pyenv/shims/python")
#+end_src
*** Undo Tree
Save all ~.undo-tree~ files in ~~/.emacs.d/undo~.
#+begin_src emacs-lisp
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
#+end_src
*** Turn on Auto Fill for text-mode
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src
** Org
*** Basic
**** Set Base Org Folder
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-agenda-files '("~/org")))
#+end_src
**** Enable org-indent-mode
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-startup-indented t))
#+end_src
*** Add project TODOs to Agenda
#+begin_src emacs-lisp
  (with-eval-after-load 'org-agenda
    (require 'org-projectile)
    (mapcar #'(lambda (file)
               (when (file-exists-p file)
                 (push file org-agenda-files)))
            (org-projectile-todo-files)))
#+end_src
** Magit
*** Undo last commit
#+begin_src emacs-lisp
  (defun undo-last-commit ()
    (interactive)
    (magit-reset-soft "HEAD^"))
  
  (transient-append-suffix 'magit-reset "w"
    '("u" "undo" undo-last-commit))
#+end_src
*** Stage and commit each unstaged file
#+begin_src emacs-lisp
  (defun stage-and-commit-file (file)
    (magit-stage-file file)
    (magit-run-git "commit" "-m" file))
  
  (defun commit-each-unstaged-file ()
    "Stage and commit each file returned by magit-unstaged-files"
    (interactive)
    (dolist (file (magit-unstaged-files))
      (stage-and-commit-file file)))
 
  (transient-append-suffix 'magit-commit "c"
    '("E" "Commit each unstaged file" commit-each-unstaged-file))
#+end_src
*** Replay commits on top of branch
    Using sleep-for works fine but would be good to figure out a more reliable
    check.
#+begin_src emacs-lisp
  (defun wait-for-git-rebase ()
    (print "wait for rebase")
    (if (not (file-exists-p ".git/REBASE_HEAD"))
        (progn
          (sleep-for 1)
          (print "checking for rebase...")
          (wait-for-git-rebase))))

  (defun wait-for-git-lock ()
    (print "wait for lock")
    (if (not (file-exists-p ".git/index.lock"))
        (progn
          (sleep-for 1)
          (print "checking for index lock...")
          (wait-for-git-lock))))

  (defun wait-for-git-lock-release ()
    (print "wait for lock release")
    (if (file-exists-p ".git/index.lock")
        (progn
          (sleep-for 1)
          (print "checking for index lock release...")
          (wait-for-git-lock-release))))

  (defun replay-commits-on-branch (commit)
    "Replay the commits starting at the point on top of another branch"
    (interactive (list (magit-reset-read-branch-or-commit
                        (concat (magit--propertize-face "Hard" 'bold)
                                " reset %s to"))))
    (let ((commit-at-point (magit-commit-at-point)))
      (magit-rebase-edit-commit commit-at-point '())
      (sleep-for 1)
      (magit-reset-hard commit)
      (sleep-for 1)
      (magit-rebase-continue)))

  (transient-append-suffix 'magit-rebase "s"
    '("b" "Replay commits on branch" replay-commits-on-branch))
#+end_src
